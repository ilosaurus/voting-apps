pipeline {
  agent {
      docker{
          image 'node:8.16.0-alpine'
      }
  }

  stages{
    stage("build"){
      when{
        changeset "**/vote/**"
      }
      steps{
        echo 'Compiling vote app'
        dir('vote'){
          sh 'npm install'
        }
      }
    }
    
    stage("test"){
      when{
          changeset "**/vote/**"
      }
      steps{
        echo 'Running Unit Tets on vote app'
        dir('vote'){
           sh 'nosetest -v'
        }
      }
    }
    
    
    // stage("package"){
    //   when{
    //       changeset "**/vote/**"
    //   }
    //   steps{
    //     echo 'Packaging vote app'
    //     dir('vote'){
    //       sh 'nosetest -v'
    //     }
    //   }
    // }
    
      stage('docker-package'){
          agent any
          when{
            changeset "**/vote/**"
          }
          steps{
            echo 'Packaging vote app with docker'
            pwd
            
            script{
              docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                  def workerImage = docker.build("ilosaurus/vote:v${env.BUILD_ID}", "./vote")
                  workerImage.push()
                  workerImage.push("${env.BRANCH_NAME}")
              }
            }
          }
      }

    //   stage('deploy to dev'){
    //       agent any
    //       when{
    //         branch 'master'
    //       }
    //       steps{
    //         echo 'Deploy instavote app with docker compose'
    //         sh 'docker-compose down --remove '
    //         sh 'docker-compose up -d'
    //       }
    //   }

  }
  post{
    always{
      echo 'Building multibranch pipeline for vote is completed..'
    }
    failure {
      slackSend (channel: "instavoteg2", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
    success {
      slackSend (channel: "instavoteg2", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
  }
}